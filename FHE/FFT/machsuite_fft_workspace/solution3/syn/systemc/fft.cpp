// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fft.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fft::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fft::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<27> fft::ap_ST_fsm_state1 = "1";
const sc_lv<27> fft::ap_ST_fsm_state2 = "10";
const sc_lv<27> fft::ap_ST_fsm_state3 = "100";
const sc_lv<27> fft::ap_ST_fsm_state4 = "1000";
const sc_lv<27> fft::ap_ST_fsm_state5 = "10000";
const sc_lv<27> fft::ap_ST_fsm_state6 = "100000";
const sc_lv<27> fft::ap_ST_fsm_state7 = "1000000";
const sc_lv<27> fft::ap_ST_fsm_state8 = "10000000";
const sc_lv<27> fft::ap_ST_fsm_state9 = "100000000";
const sc_lv<27> fft::ap_ST_fsm_state10 = "1000000000";
const sc_lv<27> fft::ap_ST_fsm_state11 = "10000000000";
const sc_lv<27> fft::ap_ST_fsm_state12 = "100000000000";
const sc_lv<27> fft::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<27> fft::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<27> fft::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<27> fft::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<27> fft::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<32> fft::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fft::ap_const_lv1_1 = "1";
const sc_lv<32> fft::ap_const_lv32_3 = "11";
const sc_lv<32> fft::ap_const_lv32_D = "1101";
const sc_lv<1> fft::ap_const_lv1_0 = "0";
const sc_lv<32> fft::ap_const_lv32_9 = "1001";
const sc_lv<32> fft::ap_const_lv32_A = "1010";
const sc_lv<32> fft::ap_const_lv32_18 = "11000";
const sc_lv<32> fft::ap_const_lv32_1 = "1";
const sc_lv<32> fft::ap_const_lv32_2 = "10";
const sc_lv<32> fft::ap_const_lv32_4 = "100";
const sc_lv<32> fft::ap_const_lv32_C = "1100";
const sc_lv<32> fft::ap_const_lv32_13 = "10011";
const sc_lv<32> fft::ap_const_lv32_19 = "11001";
const sc_lv<32> fft::ap_const_lv32_1A = "11010";
const sc_lv<30> fft::ap_const_lv30_200 = "1000000000";
const sc_lv<4> fft::ap_const_lv4_0 = "0000";
const sc_lv<32> fft::ap_const_lv32_B = "1011";
const sc_lv<32> fft::ap_const_lv32_5 = "101";
const sc_lv<32> fft::ap_const_lv32_6 = "110";
const sc_lv<32> fft::ap_const_lv32_14 = "10100";
const sc_lv<32> fft::ap_const_lv32_E = "1110";
const sc_lv<4> fft::ap_const_lv4_A = "1010";
const sc_lv<4> fft::ap_const_lv4_1 = "1";
const sc_lv<10> fft::ap_const_lv10_3FF = "1111111111";
const sc_lv<32> fft::ap_const_lv32_1F = "11111";
const sc_lv<22> fft::ap_const_lv22_1 = "1";
const sc_lv<10> fft::ap_const_lv10_0 = "0000000000";
const sc_lv<32> fft::ap_const_lv32_1D = "11101";
const sc_lv<2> fft::ap_const_lv2_0 = "00";
const sc_lv<2> fft::ap_const_lv2_1 = "1";

fft::fft(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fft_dadddsub_64nsbkb_U1 = new fft_dadddsub_64nsbkb<1,5,64,64,64>("fft_dadddsub_64nsbkb_U1");
    fft_dadddsub_64nsbkb_U1->clk(ap_clk);
    fft_dadddsub_64nsbkb_U1->reset(ap_rst);
    fft_dadddsub_64nsbkb_U1->din0(grp_fu_172_p0);
    fft_dadddsub_64nsbkb_U1->din1(grp_fu_172_p1);
    fft_dadddsub_64nsbkb_U1->opcode(grp_fu_172_opcode);
    fft_dadddsub_64nsbkb_U1->ce(ap_var_for_const0);
    fft_dadddsub_64nsbkb_U1->dout(grp_fu_172_p2);
    fft_dadddsub_64nsbkb_U2 = new fft_dadddsub_64nsbkb<1,5,64,64,64>("fft_dadddsub_64nsbkb_U2");
    fft_dadddsub_64nsbkb_U2->clk(ap_clk);
    fft_dadddsub_64nsbkb_U2->reset(ap_rst);
    fft_dadddsub_64nsbkb_U2->din0(grp_fu_176_p0);
    fft_dadddsub_64nsbkb_U2->din1(grp_fu_176_p1);
    fft_dadddsub_64nsbkb_U2->opcode(grp_fu_176_opcode);
    fft_dadddsub_64nsbkb_U2->ce(ap_var_for_const0);
    fft_dadddsub_64nsbkb_U2->dout(grp_fu_176_p2);
    fft_dmul_64ns_64ncud_U3 = new fft_dmul_64ns_64ncud<1,6,64,64,64>("fft_dmul_64ns_64ncud_U3");
    fft_dmul_64ns_64ncud_U3->clk(ap_clk);
    fft_dmul_64ns_64ncud_U3->reset(ap_rst);
    fft_dmul_64ns_64ncud_U3->din0(real_twid_load_reg_416);
    fft_dmul_64ns_64ncud_U3->din1(reg_196);
    fft_dmul_64ns_64ncud_U3->ce(ap_var_for_const0);
    fft_dmul_64ns_64ncud_U3->dout(grp_fu_180_p2);
    fft_dmul_64ns_64ncud_U4 = new fft_dmul_64ns_64ncud<1,6,64,64,64>("fft_dmul_64ns_64ncud_U4");
    fft_dmul_64ns_64ncud_U4->clk(ap_clk);
    fft_dmul_64ns_64ncud_U4->reset(ap_rst);
    fft_dmul_64ns_64ncud_U4->din0(img_twid_load_reg_422);
    fft_dmul_64ns_64ncud_U4->din1(reg_203);
    fft_dmul_64ns_64ncud_U4->ce(ap_var_for_const0);
    fft_dmul_64ns_64ncud_U4->dout(grp_fu_184_p2);
    fft_dmul_64ns_64ncud_U5 = new fft_dmul_64ns_64ncud<1,6,64,64,64>("fft_dmul_64ns_64ncud_U5");
    fft_dmul_64ns_64ncud_U5->clk(ap_clk);
    fft_dmul_64ns_64ncud_U5->reset(ap_rst);
    fft_dmul_64ns_64ncud_U5->din0(real_twid_load_reg_416);
    fft_dmul_64ns_64ncud_U5->din1(reg_203);
    fft_dmul_64ns_64ncud_U5->ce(ap_var_for_const0);
    fft_dmul_64ns_64ncud_U5->dout(grp_fu_188_p2);
    fft_dmul_64ns_64ncud_U6 = new fft_dmul_64ns_64ncud<1,6,64,64,64>("fft_dmul_64ns_64ncud_U6");
    fft_dmul_64ns_64ncud_U6->clk(ap_clk);
    fft_dmul_64ns_64ncud_U6->reset(ap_rst);
    fft_dmul_64ns_64ncud_U6->din0(img_twid_load_reg_422);
    fft_dmul_64ns_64ncud_U6->din1(reg_196);
    fft_dmul_64ns_64ncud_U6->ce(ap_var_for_const0);
    fft_dmul_64ns_64ncud_U6->dout(grp_fu_192_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( exitcond_fu_220_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond_fu_220_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_even_cast_fu_280_p2);
    sensitive << ( tmp_12_reg_351 );
    sensitive << ( tmp_15_fu_266_p1 );

    SC_METHOD(thread_even_fu_275_p2);
    sensitive << ( odd_cast_reg_339 );
    sensitive << ( odd_1_fu_270_p2 );

    SC_METHOD(thread_exitcond_fu_220_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( log_reg_152 );

    SC_METHOD(thread_grp_fu_172_opcode);
    sensitive << ( icmp_reg_356 );
    sensitive << ( tmp_9_reg_402 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_172_p0);
    sensitive << ( reg_196 );
    sensitive << ( tmp_1_reg_428 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_172_p1);
    sensitive << ( real_load_1_reg_392 );
    sensitive << ( tmp_4_reg_433 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_176_opcode);
    sensitive << ( icmp_reg_356 );
    sensitive << ( tmp_9_reg_402 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_176_p0);
    sensitive << ( reg_203 );
    sensitive << ( tmp_6_reg_438 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_176_p1);
    sensitive << ( img_load_1_reg_397 );
    sensitive << ( tmp_10_reg_443 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_icmp_fu_260_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_14_fu_250_p4 );

    SC_METHOD(thread_img_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( img_addr_reg_371 );
    sensitive << ( img_addr_1_reg_387 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( tmp_2_fu_285_p1 );
    sensitive << ( tmp_3_fu_296_p1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_img_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_img_d0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( reg_215 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_img_twid_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_s_fu_306_p1 );

    SC_METHOD(thread_img_twid_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_img_we0);
    sensitive << ( icmp_reg_356 );
    sensitive << ( tmp_9_reg_402 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_log_1_fu_226_p2);
    sensitive << ( log_reg_152 );

    SC_METHOD(thread_log_cast2_cast_fu_236_p1);
    sensitive << ( log_reg_152 );

    SC_METHOD(thread_odd_1_fu_270_p2);
    sensitive << ( odd_cast_reg_339 );
    sensitive << ( odd1_reg_163 );

    SC_METHOD(thread_odd_2_fu_311_p2);
    sensitive << ( odd_1_reg_360 );

    SC_METHOD(thread_odd_cast_fu_232_p1);
    sensitive << ( odd_reg_140 );

    SC_METHOD(thread_real_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( real_addr_reg_366 );
    sensitive << ( real_addr_1_reg_382 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( tmp_2_fu_285_p1 );
    sensitive << ( tmp_3_fu_296_p1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_real_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_real_r_d0);
    sensitive << ( reg_210 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_real_r_we0);
    sensitive << ( icmp_reg_356 );
    sensitive << ( tmp_9_reg_402 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_real_twid_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_s_fu_306_p1 );

    SC_METHOD(thread_real_twid_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_rootindex_fu_291_p2);
    sensitive << ( log_cast2_cast_reg_346 );
    sensitive << ( even_cast_fu_280_p2 );

    SC_METHOD(thread_tmp_12_fu_244_p2);
    sensitive << ( tmp_fu_240_p1 );

    SC_METHOD(thread_tmp_14_fu_250_p4);
    sensitive << ( odd1_reg_163 );

    SC_METHOD(thread_tmp_15_fu_266_p1);
    sensitive << ( odd1_reg_163 );

    SC_METHOD(thread_tmp_16_fu_326_p1);
    sensitive << ( tmp_17_fu_316_p4 );

    SC_METHOD(thread_tmp_17_fu_316_p4);
    sensitive << ( odd_reg_140 );

    SC_METHOD(thread_tmp_2_fu_285_p1);
    sensitive << ( even_fu_275_p2 );

    SC_METHOD(thread_tmp_3_fu_296_p1);
    sensitive << ( odd_1_reg_360 );

    SC_METHOD(thread_tmp_9_fu_301_p2);
    sensitive << ( rootindex_reg_376 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp_fu_240_p1);
    sensitive << ( odd_reg_140 );

    SC_METHOD(thread_tmp_s_fu_306_p1);
    sensitive << ( rootindex_reg_376 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_220_p2 );
    sensitive << ( icmp_fu_260_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fft_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, real_r_address0, "(port)real_r_address0");
    sc_trace(mVcdFile, real_r_ce0, "(port)real_r_ce0");
    sc_trace(mVcdFile, real_r_we0, "(port)real_r_we0");
    sc_trace(mVcdFile, real_r_d0, "(port)real_r_d0");
    sc_trace(mVcdFile, real_r_q0, "(port)real_r_q0");
    sc_trace(mVcdFile, img_address0, "(port)img_address0");
    sc_trace(mVcdFile, img_ce0, "(port)img_ce0");
    sc_trace(mVcdFile, img_we0, "(port)img_we0");
    sc_trace(mVcdFile, img_d0, "(port)img_d0");
    sc_trace(mVcdFile, img_q0, "(port)img_q0");
    sc_trace(mVcdFile, real_twid_address0, "(port)real_twid_address0");
    sc_trace(mVcdFile, real_twid_ce0, "(port)real_twid_ce0");
    sc_trace(mVcdFile, real_twid_q0, "(port)real_twid_q0");
    sc_trace(mVcdFile, img_twid_address0, "(port)img_twid_address0");
    sc_trace(mVcdFile, img_twid_ce0, "(port)img_twid_ce0");
    sc_trace(mVcdFile, img_twid_q0, "(port)img_twid_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_196, "reg_196");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, icmp_reg_356, "icmp_reg_356");
    sc_trace(mVcdFile, tmp_9_reg_402, "tmp_9_reg_402");
    sc_trace(mVcdFile, reg_203, "reg_203");
    sc_trace(mVcdFile, grp_fu_172_p2, "grp_fu_172_p2");
    sc_trace(mVcdFile, reg_210, "reg_210");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_176_p2, "grp_fu_176_p2");
    sc_trace(mVcdFile, reg_215, "reg_215");
    sc_trace(mVcdFile, exitcond_fu_220_p2, "exitcond_fu_220_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, log_1_fu_226_p2, "log_1_fu_226_p2");
    sc_trace(mVcdFile, log_1_reg_334, "log_1_reg_334");
    sc_trace(mVcdFile, odd_cast_fu_232_p1, "odd_cast_fu_232_p1");
    sc_trace(mVcdFile, odd_cast_reg_339, "odd_cast_reg_339");
    sc_trace(mVcdFile, log_cast2_cast_fu_236_p1, "log_cast2_cast_fu_236_p1");
    sc_trace(mVcdFile, log_cast2_cast_reg_346, "log_cast2_cast_reg_346");
    sc_trace(mVcdFile, tmp_12_fu_244_p2, "tmp_12_fu_244_p2");
    sc_trace(mVcdFile, tmp_12_reg_351, "tmp_12_reg_351");
    sc_trace(mVcdFile, icmp_fu_260_p2, "icmp_fu_260_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, odd_1_fu_270_p2, "odd_1_fu_270_p2");
    sc_trace(mVcdFile, odd_1_reg_360, "odd_1_reg_360");
    sc_trace(mVcdFile, real_addr_reg_366, "real_addr_reg_366");
    sc_trace(mVcdFile, img_addr_reg_371, "img_addr_reg_371");
    sc_trace(mVcdFile, rootindex_fu_291_p2, "rootindex_fu_291_p2");
    sc_trace(mVcdFile, rootindex_reg_376, "rootindex_reg_376");
    sc_trace(mVcdFile, real_addr_1_reg_382, "real_addr_1_reg_382");
    sc_trace(mVcdFile, img_addr_1_reg_387, "img_addr_1_reg_387");
    sc_trace(mVcdFile, real_load_1_reg_392, "real_load_1_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, img_load_1_reg_397, "img_load_1_reg_397");
    sc_trace(mVcdFile, tmp_9_fu_301_p2, "tmp_9_fu_301_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, real_twid_load_reg_416, "real_twid_load_reg_416");
    sc_trace(mVcdFile, img_twid_load_reg_422, "img_twid_load_reg_422");
    sc_trace(mVcdFile, grp_fu_180_p2, "grp_fu_180_p2");
    sc_trace(mVcdFile, tmp_1_reg_428, "tmp_1_reg_428");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_184_p2, "grp_fu_184_p2");
    sc_trace(mVcdFile, tmp_4_reg_433, "tmp_4_reg_433");
    sc_trace(mVcdFile, grp_fu_188_p2, "grp_fu_188_p2");
    sc_trace(mVcdFile, tmp_6_reg_438, "tmp_6_reg_438");
    sc_trace(mVcdFile, grp_fu_192_p2, "grp_fu_192_p2");
    sc_trace(mVcdFile, tmp_10_reg_443, "tmp_10_reg_443");
    sc_trace(mVcdFile, odd_2_fu_311_p2, "odd_2_fu_311_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, tmp_16_fu_326_p1, "tmp_16_fu_326_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, odd_reg_140, "odd_reg_140");
    sc_trace(mVcdFile, log_reg_152, "log_reg_152");
    sc_trace(mVcdFile, odd1_reg_163, "odd1_reg_163");
    sc_trace(mVcdFile, tmp_2_fu_285_p1, "tmp_2_fu_285_p1");
    sc_trace(mVcdFile, tmp_3_fu_296_p1, "tmp_3_fu_296_p1");
    sc_trace(mVcdFile, tmp_s_fu_306_p1, "tmp_s_fu_306_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_172_p0, "grp_fu_172_p0");
    sc_trace(mVcdFile, grp_fu_172_p1, "grp_fu_172_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_176_p0, "grp_fu_176_p0");
    sc_trace(mVcdFile, grp_fu_176_p1, "grp_fu_176_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_fu_240_p1, "tmp_fu_240_p1");
    sc_trace(mVcdFile, tmp_14_fu_250_p4, "tmp_14_fu_250_p4");
    sc_trace(mVcdFile, tmp_15_fu_266_p1, "tmp_15_fu_266_p1");
    sc_trace(mVcdFile, even_fu_275_p2, "even_fu_275_p2");
    sc_trace(mVcdFile, even_cast_fu_280_p2, "even_cast_fu_280_p2");
    sc_trace(mVcdFile, tmp_17_fu_316_p4, "tmp_17_fu_316_p4");
    sc_trace(mVcdFile, grp_fu_172_opcode, "grp_fu_172_opcode");
    sc_trace(mVcdFile, grp_fu_176_opcode, "grp_fu_176_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fft.hdltvin.dat");
    mHdltvoutHandle.open("fft.hdltvout.dat");
}

fft::~fft() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fft_dadddsub_64nsbkb_U1;
    delete fft_dadddsub_64nsbkb_U2;
    delete fft_dmul_64ns_64ncud_U3;
    delete fft_dmul_64ns_64ncud_U4;
    delete fft_dmul_64ns_64ncud_U5;
    delete fft_dmul_64ns_64ncud_U6;
}

void fft::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fft::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read()))) {
        log_reg_152 = log_1_reg_334.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        log_reg_152 = ap_const_lv4_0;
    }
    if ((!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read()))) {
        odd1_reg_163 = odd_2_fu_311_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read()))) {
        odd1_reg_163 = odd_cast_fu_232_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state27.read()))) {
        odd_reg_140 = tmp_16_fu_326_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        odd_reg_140 = ap_const_lv30_200;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        icmp_reg_356 = icmp_fu_260_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        img_addr_1_reg_387 =  (sc_lv<10>) (tmp_3_fu_296_p1.read());
        real_addr_1_reg_382 =  (sc_lv<10>) (tmp_3_fu_296_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_260_p2.read()))) {
        img_addr_reg_371 =  (sc_lv<10>) (tmp_2_fu_285_p1.read());
        odd_1_reg_360 = odd_1_fu_270_p2.read();
        real_addr_reg_366 =  (sc_lv<10>) (tmp_2_fu_285_p1.read());
        rootindex_reg_376 = rootindex_fu_291_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        img_load_1_reg_397 = img_q0.read();
        real_load_1_reg_392 = real_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()) && !esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()))) {
        img_twid_load_reg_422 = img_twid_q0.read();
        real_twid_load_reg_416 = real_twid_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        log_1_reg_334 = log_1_fu_226_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read()))) {
        log_cast2_cast_reg_346 = log_cast2_cast_fu_236_p1.read();
        odd_cast_reg_339 = odd_cast_fu_232_p1.read();
        tmp_12_reg_351 = tmp_12_fu_244_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()) && 
  !esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read())))) {
        reg_196 = real_r_q0.read();
        reg_203 = img_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || (!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        reg_210 = grp_fu_172_p2.read();
        reg_215 = grp_fu_176_p2.read();
    }
    if ((!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        tmp_10_reg_443 = grp_fu_192_p2.read();
        tmp_1_reg_428 = grp_fu_180_p2.read();
        tmp_4_reg_433 = grp_fu_184_p2.read();
        tmp_6_reg_438 = grp_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        tmp_9_reg_402 = tmp_9_fu_301_p2.read();
    }
}

void fft::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void fft::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void fft::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void fft::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void fft::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void fft::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void fft::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void fft::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void fft::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void fft::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void fft::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read().range(24, 24);
}

void fft::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read().range(25, 25);
}

void fft::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read().range(26, 26);
}

void fft::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void fft::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void fft::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void fft::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void fft::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void fft::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fft::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fft::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fft::thread_even_cast_fu_280_p2() {
    even_cast_fu_280_p2 = (tmp_15_fu_266_p1.read() & tmp_12_reg_351.read());
}

void fft::thread_even_fu_275_p2() {
    even_fu_275_p2 = (odd_1_fu_270_p2.read() ^ odd_cast_reg_339.read());
}

void fft::thread_exitcond_fu_220_p2() {
    exitcond_fu_220_p2 = (!log_reg_152.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(log_reg_152.read() == ap_const_lv4_A);
}

void fft::thread_grp_fu_172_opcode() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        grp_fu_172_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        grp_fu_172_opcode = ap_const_lv2_0;
    } else {
        grp_fu_172_opcode = "XX";
    }
}

void fft::thread_grp_fu_172_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        grp_fu_172_p0 = tmp_1_reg_428.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        grp_fu_172_p0 = reg_196.read();
    } else {
        grp_fu_172_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_172_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        grp_fu_172_p1 = tmp_4_reg_433.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        grp_fu_172_p1 = real_load_1_reg_392.read();
    } else {
        grp_fu_172_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_176_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        grp_fu_176_opcode = ap_const_lv2_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
                (!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read())))) {
        grp_fu_176_opcode = ap_const_lv2_0;
    } else {
        grp_fu_176_opcode = "XX";
    }
}

void fft::thread_grp_fu_176_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        grp_fu_176_p0 = tmp_6_reg_438.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        grp_fu_176_p0 = reg_203.read();
    } else {
        grp_fu_176_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_176_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        grp_fu_176_p1 = tmp_10_reg_443.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        grp_fu_176_p1 = img_load_1_reg_397.read();
    } else {
        grp_fu_176_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_icmp_fu_260_p2() {
    icmp_fu_260_p2 = (!tmp_14_fu_250_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_14_fu_250_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void fft::thread_img_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        img_address0 = img_addr_reg_371.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())))) {
        img_address0 = img_addr_1_reg_387.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        img_address0 =  (sc_lv<10>) (tmp_3_fu_296_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        img_address0 =  (sc_lv<10>) (tmp_2_fu_285_p1.read());
    } else {
        img_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_img_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())))) {
        img_ce0 = ap_const_logic_1;
    } else {
        img_ce0 = ap_const_logic_0;
    }
}

void fft::thread_img_d0() {
    img_d0 = reg_215.read();
}

void fft::thread_img_twid_address0() {
    img_twid_address0 =  (sc_lv<9>) (tmp_s_fu_306_p1.read());
}

void fft::thread_img_twid_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        img_twid_ce0 = ap_const_logic_1;
    } else {
        img_twid_ce0 = ap_const_logic_0;
    }
}

void fft::thread_img_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())))) {
        img_we0 = ap_const_logic_1;
    } else {
        img_we0 = ap_const_logic_0;
    }
}

void fft::thread_log_1_fu_226_p2() {
    log_1_fu_226_p2 = (!log_reg_152.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(log_reg_152.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fft::thread_log_cast2_cast_fu_236_p1() {
    log_cast2_cast_fu_236_p1 = esl_zext<10,4>(log_reg_152.read());
}

void fft::thread_odd_1_fu_270_p2() {
    odd_1_fu_270_p2 = (odd1_reg_163.read() | odd_cast_reg_339.read());
}

void fft::thread_odd_2_fu_311_p2() {
    odd_2_fu_311_p2 = (!odd_1_reg_360.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(odd_1_reg_360.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fft::thread_odd_cast_fu_232_p1() {
    odd_cast_fu_232_p1 = esl_sext<32,30>(odd_reg_140.read());
}

void fft::thread_real_r_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        real_r_address0 = real_addr_reg_366.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())))) {
        real_r_address0 = real_addr_1_reg_382.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        real_r_address0 =  (sc_lv<10>) (tmp_3_fu_296_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        real_r_address0 =  (sc_lv<10>) (tmp_2_fu_285_p1.read());
    } else {
        real_r_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_real_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())))) {
        real_r_ce0 = ap_const_logic_1;
    } else {
        real_r_ce0 = ap_const_logic_0;
    }
}

void fft::thread_real_r_d0() {
    real_r_d0 = reg_210.read();
}

void fft::thread_real_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (!esl_seteq<1,1,1>(icmp_reg_356.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_402.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state26.read())))) {
        real_r_we0 = ap_const_logic_1;
    } else {
        real_r_we0 = ap_const_logic_0;
    }
}

void fft::thread_real_twid_address0() {
    real_twid_address0 =  (sc_lv<9>) (tmp_s_fu_306_p1.read());
}

void fft::thread_real_twid_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        real_twid_ce0 = ap_const_logic_1;
    } else {
        real_twid_ce0 = ap_const_logic_0;
    }
}

void fft::thread_rootindex_fu_291_p2() {
    rootindex_fu_291_p2 = (!log_cast2_cast_reg_346.read().is_01())? sc_lv<10>(): even_cast_fu_280_p2.read() << (unsigned short)log_cast2_cast_reg_346.read().to_uint();
}

void fft::thread_tmp_12_fu_244_p2() {
    tmp_12_fu_244_p2 = (tmp_fu_240_p1.read() ^ ap_const_lv10_3FF);
}

void fft::thread_tmp_14_fu_250_p4() {
    tmp_14_fu_250_p4 = odd1_reg_163.read().range(31, 10);
}

void fft::thread_tmp_15_fu_266_p1() {
    tmp_15_fu_266_p1 = odd1_reg_163.read().range(10-1, 0);
}

void fft::thread_tmp_16_fu_326_p1() {
    tmp_16_fu_326_p1 = esl_sext<30,29>(tmp_17_fu_316_p4.read());
}

void fft::thread_tmp_17_fu_316_p4() {
    tmp_17_fu_316_p4 = odd_reg_140.read().range(29, 1);
}

void fft::thread_tmp_2_fu_285_p1() {
    tmp_2_fu_285_p1 = esl_sext<64,32>(even_fu_275_p2.read());
}

void fft::thread_tmp_3_fu_296_p1() {
    tmp_3_fu_296_p1 = esl_sext<64,32>(odd_1_reg_360.read());
}

void fft::thread_tmp_9_fu_301_p2() {
    tmp_9_fu_301_p2 = (!rootindex_reg_376.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(rootindex_reg_376.read() == ap_const_lv10_0);
}

void fft::thread_tmp_fu_240_p1() {
    tmp_fu_240_p1 = odd_reg_140.read().range(10-1, 0);
}

void fft::thread_tmp_s_fu_306_p1() {
    tmp_s_fu_306_p1 = esl_zext<64,10>(rootindex_reg_376.read());
}

void fft::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_260_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<27>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fft::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_address0\" :  \"" << real_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_ce0\" :  \"" << real_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_we0\" :  \"" << real_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_d0\" :  \"" << real_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_r_q0\" :  \"" << real_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_address0\" :  \"" << img_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_ce0\" :  \"" << img_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_we0\" :  \"" << img_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_d0\" :  \"" << img_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"img_q0\" :  \"" << img_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_twid_address0\" :  \"" << real_twid_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_twid_ce0\" :  \"" << real_twid_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_twid_q0\" :  \"" << real_twid_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_twid_address0\" :  \"" << img_twid_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_twid_ce0\" :  \"" << img_twid_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"img_twid_q0\" :  \"" << img_twid_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

