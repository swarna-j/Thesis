// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=184351,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=50,HLS_SYN_FF=3153,HLS_SYN_LUT=5158}" *)

module fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        real_r_address0,
        real_r_ce0,
        real_r_we0,
        real_r_d0,
        real_r_q0,
        img_address0,
        img_ce0,
        img_we0,
        img_d0,
        img_q0,
        real_twid_address0,
        real_twid_ce0,
        real_twid_q0,
        img_twid_address0,
        img_twid_ce0,
        img_twid_q0
);

parameter    ap_ST_fsm_state1 = 27'b1;
parameter    ap_ST_fsm_state2 = 27'b10;
parameter    ap_ST_fsm_state3 = 27'b100;
parameter    ap_ST_fsm_state4 = 27'b1000;
parameter    ap_ST_fsm_state5 = 27'b10000;
parameter    ap_ST_fsm_state6 = 27'b100000;
parameter    ap_ST_fsm_state7 = 27'b1000000;
parameter    ap_ST_fsm_state8 = 27'b10000000;
parameter    ap_ST_fsm_state9 = 27'b100000000;
parameter    ap_ST_fsm_state10 = 27'b1000000000;
parameter    ap_ST_fsm_state11 = 27'b10000000000;
parameter    ap_ST_fsm_state12 = 27'b100000000000;
parameter    ap_ST_fsm_state13 = 27'b1000000000000;
parameter    ap_ST_fsm_state14 = 27'b10000000000000;
parameter    ap_ST_fsm_state15 = 27'b100000000000000;
parameter    ap_ST_fsm_state16 = 27'b1000000000000000;
parameter    ap_ST_fsm_state17 = 27'b10000000000000000;
parameter    ap_ST_fsm_state18 = 27'b100000000000000000;
parameter    ap_ST_fsm_state19 = 27'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 27'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 27'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 27'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 27'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 27'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 27'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 27'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 27'b100000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv30_200 = 30'b1000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv22_1 = 22'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] real_r_address0;
output   real_r_ce0;
output   real_r_we0;
output  [63:0] real_r_d0;
input  [63:0] real_r_q0;
output  [9:0] img_address0;
output   img_ce0;
output   img_we0;
output  [63:0] img_d0;
input  [63:0] img_q0;
output  [8:0] real_twid_address0;
output   real_twid_ce0;
input  [63:0] real_twid_q0;
output  [8:0] img_twid_address0;
output   img_twid_ce0;
input  [63:0] img_twid_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] real_r_address0;
reg real_r_ce0;
reg real_r_we0;
reg[9:0] img_address0;
reg img_ce0;
reg img_we0;
reg real_twid_ce0;
reg img_twid_ce0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [63:0] reg_196;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state14;
reg   [0:0] icmp_reg_356;
reg   [0:0] tmp_9_reg_402;
reg   [63:0] reg_203;
wire   [63:0] grp_fu_172_p2;
reg   [63:0] reg_210;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state25;
wire   [63:0] grp_fu_176_p2;
reg   [63:0] reg_215;
wire   [0:0] exitcond_fu_220_p2;
wire   [0:0] ap_CS_fsm_state2;
wire   [3:0] log_1_fu_226_p2;
reg   [3:0] log_1_reg_334;
wire  signed [31:0] odd_cast_fu_232_p1;
reg  signed [31:0] odd_cast_reg_339;
wire   [9:0] log_cast2_cast_fu_236_p1;
reg   [9:0] log_cast2_cast_reg_346;
wire   [9:0] tmp_12_fu_244_p2;
reg   [9:0] tmp_12_reg_351;
wire   [0:0] icmp_fu_260_p2;
wire   [0:0] ap_CS_fsm_state3;
wire   [31:0] odd_1_fu_270_p2;
reg   [31:0] odd_1_reg_360;
reg   [9:0] real_addr_reg_366;
reg   [9:0] img_addr_reg_371;
wire   [9:0] rootindex_fu_291_p2;
reg   [9:0] rootindex_reg_376;
reg   [9:0] real_addr_1_reg_382;
reg   [9:0] img_addr_1_reg_387;
reg   [63:0] real_load_1_reg_392;
wire   [0:0] ap_CS_fsm_state5;
reg   [63:0] img_load_1_reg_397;
wire   [0:0] tmp_9_fu_301_p2;
wire   [0:0] ap_CS_fsm_state13;
reg   [63:0] real_twid_load_reg_416;
reg   [63:0] img_twid_load_reg_422;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] tmp_1_reg_428;
wire   [0:0] ap_CS_fsm_state20;
wire   [63:0] grp_fu_184_p2;
reg   [63:0] tmp_4_reg_433;
wire   [63:0] grp_fu_188_p2;
reg   [63:0] tmp_6_reg_438;
wire   [63:0] grp_fu_192_p2;
reg   [63:0] tmp_10_reg_443;
wire   [31:0] odd_2_fu_311_p2;
wire   [0:0] ap_CS_fsm_state26;
wire  signed [29:0] tmp_16_fu_326_p1;
wire   [0:0] ap_CS_fsm_state27;
reg   [29:0] odd_reg_140;
reg   [3:0] log_reg_152;
reg   [31:0] odd1_reg_163;
wire  signed [63:0] tmp_2_fu_285_p1;
wire  signed [63:0] tmp_3_fu_296_p1;
wire   [63:0] tmp_s_fu_306_p1;
wire   [0:0] ap_CS_fsm_state12;
reg   [63:0] grp_fu_172_p0;
reg   [63:0] grp_fu_172_p1;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state21;
reg   [63:0] grp_fu_176_p0;
reg   [63:0] grp_fu_176_p1;
wire   [0:0] ap_CS_fsm_state15;
wire   [9:0] tmp_fu_240_p1;
wire   [21:0] tmp_14_fu_250_p4;
wire   [9:0] tmp_15_fu_266_p1;
wire   [31:0] even_fu_275_p2;
wire   [9:0] even_cast_fu_280_p2;
wire   [28:0] tmp_17_fu_316_p4;
reg   [1:0] grp_fu_172_opcode;
reg   [1:0] grp_fu_176_opcode;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'b1;
end

fft_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dadddsub_64nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .din1(grp_fu_172_p1),
    .opcode(grp_fu_172_opcode),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

fft_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dadddsub_64nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(grp_fu_176_p1),
    .opcode(grp_fu_176_opcode),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

fft_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(real_twid_load_reg_416),
    .din1(reg_196),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

fft_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_twid_load_reg_422),
    .din1(reg_203),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

fft_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(real_twid_load_reg_416),
    .din1(reg_203),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

fft_dmul_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64ncud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_twid_load_reg_422),
    .din1(reg_196),
    .ce(1'b1),
    .dout(grp_fu_192_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        log_reg_152 <= log_1_reg_334;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        log_reg_152 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(icmp_reg_356 == 1'b0) & (1'b1 == ap_CS_fsm_state26))) begin
        odd1_reg_163 <= odd_2_fu_311_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond_fu_220_p2))) begin
        odd1_reg_163 <= odd_cast_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        odd_reg_140 <= tmp_16_fu_326_p1;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        odd_reg_140 <= ap_const_lv30_200;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_reg_356 <= icmp_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_addr_1_reg_387 <= tmp_3_fu_296_p1;
        real_addr_1_reg_382 <= tmp_3_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == icmp_fu_260_p2))) begin
        img_addr_reg_371 <= tmp_2_fu_285_p1;
        odd_1_reg_360 <= odd_1_fu_270_p2;
        real_addr_reg_366 <= tmp_2_fu_285_p1;
        rootindex_reg_376 <= rootindex_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_load_1_reg_397 <= img_q0;
        real_load_1_reg_392 <= real_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402))) begin
        img_twid_load_reg_422 <= img_twid_q0;
        real_twid_load_reg_416 <= real_twid_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        log_1_reg_334 <= log_1_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond_fu_220_p2))) begin
        log_cast2_cast_reg_346[3 : 0] <= log_cast2_cast_fu_236_p1[3 : 0];
        odd_cast_reg_339 <= odd_cast_fu_232_p1;
        tmp_12_reg_351 <= tmp_12_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state14) & ~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402)))) begin
        reg_196 <= real_r_q0;
        reg_203 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state25)))) begin
        reg_210 <= grp_fu_172_p2;
        reg_215 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp_10_reg_443 <= grp_fu_192_p2;
        tmp_1_reg_428 <= grp_fu_180_p2;
        tmp_4_reg_433 <= grp_fu_184_p2;
        tmp_6_reg_438 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_9_reg_402 <= tmp_9_fu_301_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond_fu_220_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond_fu_220_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_172_opcode = ap_const_lv2_1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_172_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_172_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_172_p0 = tmp_1_reg_428;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_172_p0 = reg_196;
    end else begin
        grp_fu_172_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_172_p1 = tmp_4_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_172_p1 = real_load_1_reg_392;
    end else begin
        grp_fu_172_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_176_opcode = ap_const_lv2_1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state21)))) begin
        grp_fu_176_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_176_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_176_p0 = tmp_6_reg_438;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_176_p0 = reg_203;
    end else begin
        grp_fu_176_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_176_p1 = tmp_10_reg_443;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_176_p1 = img_load_1_reg_397;
    end else begin
        grp_fu_176_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_address0 = img_addr_reg_371;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26))) begin
        img_address0 = img_addr_1_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_address0 = tmp_3_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_address0 = tmp_2_fu_285_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state12))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_twid_ce0 = 1'b1;
    end else begin
        img_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state26)))) begin
        img_we0 = 1'b1;
    end else begin
        img_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        real_r_address0 = real_addr_reg_366;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26))) begin
        real_r_address0 = real_addr_1_reg_382;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        real_r_address0 = tmp_3_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        real_r_address0 = tmp_2_fu_285_p1;
    end else begin
        real_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state12))) begin
        real_r_ce0 = 1'b1;
    end else begin
        real_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (~(icmp_reg_356 == 1'b0) & (1'b0 == tmp_9_reg_402) & (1'b1 == ap_CS_fsm_state26)))) begin
        real_r_we0 = 1'b1;
    end else begin
        real_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        real_twid_ce0 = 1'b1;
    end else begin
        real_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond_fu_220_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == icmp_fu_260_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign even_cast_fu_280_p2 = (tmp_15_fu_266_p1 & tmp_12_reg_351);

assign even_fu_275_p2 = (odd_1_fu_270_p2 ^ odd_cast_reg_339);

assign exitcond_fu_220_p2 = ((log_reg_152 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign icmp_fu_260_p2 = (($signed(tmp_14_fu_250_p4) < $signed(22'b1)) ? 1'b1 : 1'b0);

assign img_d0 = reg_215;

assign img_twid_address0 = tmp_s_fu_306_p1;

assign log_1_fu_226_p2 = (log_reg_152 + ap_const_lv4_1);

assign log_cast2_cast_fu_236_p1 = log_reg_152;

assign odd_1_fu_270_p2 = (odd1_reg_163 | odd_cast_reg_339);

assign odd_2_fu_311_p2 = (odd_1_reg_360 + ap_const_lv32_1);

assign odd_cast_fu_232_p1 = $signed(odd_reg_140);

assign real_r_d0 = reg_210;

assign real_twid_address0 = tmp_s_fu_306_p1;

assign rootindex_fu_291_p2 = even_cast_fu_280_p2 << log_cast2_cast_reg_346;

assign tmp_12_fu_244_p2 = (tmp_fu_240_p1 ^ ap_const_lv10_3FF);

assign tmp_14_fu_250_p4 = {{odd1_reg_163[ap_const_lv32_1F : ap_const_lv32_A]}};

assign tmp_15_fu_266_p1 = odd1_reg_163[9:0];

assign tmp_16_fu_326_p1 = $signed(tmp_17_fu_316_p4);

assign tmp_17_fu_316_p4 = {{odd_reg_140[ap_const_lv32_1D : ap_const_lv32_1]}};

assign tmp_2_fu_285_p1 = $signed(even_fu_275_p2);

assign tmp_3_fu_296_p1 = $signed(odd_1_reg_360);

assign tmp_9_fu_301_p2 = ((rootindex_reg_376 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_fu_240_p1 = odd_reg_140[9:0];

assign tmp_s_fu_306_p1 = rootindex_reg_376;

always @ (posedge ap_clk) begin
    log_cast2_cast_reg_346[9:4] <= 6'b000000;
end

endmodule //fft
