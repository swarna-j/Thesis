// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=130581,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=56,HLS_SYN_FF=4296,HLS_SYN_LUT=7601}" *)

module fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        real_r_address0,
        real_r_ce0,
        real_r_we0,
        real_r_d0,
        real_r_q0,
        real_r_address1,
        real_r_ce1,
        real_r_we1,
        real_r_d1,
        real_r_q1,
        img_address0,
        img_ce0,
        img_we0,
        img_d0,
        img_q0,
        img_address1,
        img_ce1,
        img_we1,
        img_d1,
        img_q1,
        real_twid_address0,
        real_twid_ce0,
        real_twid_q0,
        img_twid_address0,
        img_twid_ce0,
        img_twid_q0
);

parameter    ap_ST_fsm_state1 = 25'b1;
parameter    ap_ST_fsm_state2 = 25'b10;
parameter    ap_ST_fsm_state3 = 25'b100;
parameter    ap_ST_fsm_state4 = 25'b1000;
parameter    ap_ST_fsm_state5 = 25'b10000;
parameter    ap_ST_fsm_state6 = 25'b100000;
parameter    ap_ST_fsm_state7 = 25'b1000000;
parameter    ap_ST_fsm_state8 = 25'b10000000;
parameter    ap_ST_fsm_state9 = 25'b100000000;
parameter    ap_ST_fsm_state10 = 25'b1000000000;
parameter    ap_ST_fsm_state11 = 25'b10000000000;
parameter    ap_ST_fsm_state12 = 25'b100000000000;
parameter    ap_ST_fsm_state13 = 25'b1000000000000;
parameter    ap_ST_fsm_state14 = 25'b10000000000000;
parameter    ap_ST_fsm_state15 = 25'b100000000000000;
parameter    ap_ST_fsm_state16 = 25'b1000000000000000;
parameter    ap_ST_fsm_state17 = 25'b10000000000000000;
parameter    ap_ST_fsm_state18 = 25'b100000000000000000;
parameter    ap_ST_fsm_state19 = 25'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 25'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 25'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 25'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 25'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 25'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 25'b1000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv30_200 = 30'b1000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv22_1 = 22'b1;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] real_r_address0;
output   real_r_ce0;
output   real_r_we0;
output  [63:0] real_r_d0;
input  [63:0] real_r_q0;
output  [9:0] real_r_address1;
output   real_r_ce1;
output   real_r_we1;
output  [63:0] real_r_d1;
input  [63:0] real_r_q1;
output  [9:0] img_address0;
output   img_ce0;
output   img_we0;
output  [63:0] img_d0;
input  [63:0] img_q0;
output  [9:0] img_address1;
output   img_ce1;
output   img_we1;
output  [63:0] img_d1;
input  [63:0] img_q1;
output  [8:0] real_twid_address0;
output   real_twid_ce0;
input  [63:0] real_twid_q0;
output  [8:0] img_twid_address0;
output   img_twid_ce0;
input  [63:0] img_twid_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] real_r_address0;
reg real_r_ce0;
reg real_r_we0;
reg[9:0] real_r_address1;
reg real_r_ce1;
reg real_r_we1;
reg[63:0] real_r_d1;
reg[9:0] img_address0;
reg img_ce0;
reg img_we0;
reg[9:0] img_address1;
reg img_ce1;
reg img_we1;
reg[63:0] img_d1;
reg real_twid_ce0;
reg img_twid_ce0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [63:0] reg_198;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state13;
reg   [63:0] reg_206;
wire  signed [31:0] odd_cast_fu_214_p1;
reg  signed [31:0] odd_cast_reg_325;
wire   [0:0] ap_CS_fsm_state2;
wire   [9:0] log_cast2_cast_fu_218_p1;
reg   [9:0] log_cast2_cast_reg_332;
wire   [3:0] log_1_fu_228_p2;
reg   [3:0] log_1_reg_340;
wire   [9:0] tmp_12_fu_238_p2;
reg   [9:0] tmp_12_reg_345;
wire   [0:0] exitcond_fu_222_p2;
wire   [31:0] odd_1_fu_264_p2;
reg   [31:0] odd_1_reg_353;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] icmp_fu_254_p2;
reg   [9:0] real_addr_reg_358;
reg   [9:0] real_addr_1_reg_364;
reg   [9:0] img_addr_reg_370;
reg   [9:0] img_addr_1_reg_376;
wire   [9:0] rootindex_fu_291_p2;
reg   [9:0] rootindex_reg_382;
wire  signed [29:0] tmp_16_fu_306_p1;
reg   [63:0] real_load_1_reg_393;
reg   [63:0] img_load_1_reg_399;
wire   [63:0] grp_fu_166_p2;
reg   [63:0] temp_reg_405;
wire   [0:0] ap_CS_fsm_state9;
wire   [63:0] grp_fu_170_p2;
reg   [63:0] tmp_5_reg_410;
wire   [63:0] grp_fu_174_p2;
reg   [63:0] temp_1_reg_415;
wire   [63:0] grp_fu_178_p2;
reg   [63:0] tmp_7_reg_420;
wire   [0:0] tmp_9_fu_310_p2;
reg   [0:0] tmp_9_reg_425;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
reg   [63:0] real_twid_load_reg_439;
reg   [63:0] img_twid_load_reg_445;
wire   [63:0] grp_fu_182_p2;
reg   [63:0] tmp_1_reg_451;
wire   [0:0] ap_CS_fsm_state19;
wire   [63:0] grp_fu_186_p2;
reg   [63:0] tmp_4_reg_456;
wire   [63:0] grp_fu_190_p2;
reg   [63:0] tmp_6_reg_461;
wire   [63:0] grp_fu_194_p2;
reg   [63:0] tmp_10_reg_466;
reg   [63:0] temp_2_reg_471;
wire   [0:0] ap_CS_fsm_state24;
reg   [63:0] tmp_11_reg_476;
wire   [31:0] odd_2_fu_320_p2;
wire   [0:0] ap_CS_fsm_state25;
reg   [29:0] odd_reg_134;
reg   [3:0] log_reg_146;
reg   [31:0] odd1_reg_157;
wire  signed [63:0] tmp_2_fu_279_p1;
wire  signed [63:0] tmp_3_fu_285_p1;
wire   [63:0] tmp_s_fu_315_p1;
wire   [0:0] ap_CS_fsm_state10;
reg   [63:0] grp_fu_166_p0;
reg   [63:0] grp_fu_166_p1;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state20;
reg   [63:0] grp_fu_170_p0;
reg   [63:0] grp_fu_170_p1;
wire   [0:0] ap_CS_fsm_state14;
wire   [9:0] tmp_fu_234_p1;
wire   [21:0] tmp_14_fu_244_p4;
wire   [9:0] tmp_15_fu_260_p1;
wire   [31:0] even_fu_269_p2;
wire   [9:0] even_cast_fu_274_p2;
wire   [28:0] tmp_17_fu_296_p4;
reg   [1:0] grp_fu_166_opcode;
reg   [1:0] grp_fu_170_opcode;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'b1;
end

fft_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dadddsub_64nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .din1(grp_fu_166_p1),
    .opcode(grp_fu_166_opcode),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

fft_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dadddsub_64nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_170_p0),
    .din1(grp_fu_170_p1),
    .opcode(grp_fu_170_opcode),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

fft_dadd_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dadd_64ns_64ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_206),
    .din1(img_load_1_reg_399),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

fft_dsub_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dsub_64ns_64ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_206),
    .din1(img_load_1_reg_399),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

fft_dmul_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(real_twid_load_reg_439),
    .din1(reg_198),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

fft_dmul_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64neOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_twid_load_reg_445),
    .din1(reg_206),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

fft_dmul_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64neOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(real_twid_load_reg_439),
    .din1(reg_206),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

fft_dmul_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fft_dmul_64ns_64neOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_twid_load_reg_445),
    .din1(reg_198),
    .ce(1'b1),
    .dout(grp_fu_194_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == icmp_fu_254_p2))) begin
        log_reg_146 <= log_1_reg_340;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        log_reg_146 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        odd1_reg_157 <= odd_2_fu_320_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_222_p2 == 1'b0))) begin
        odd1_reg_157 <= odd_cast_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == icmp_fu_254_p2))) begin
        odd_reg_134 <= tmp_16_fu_306_p1;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        odd_reg_134 <= ap_const_lv30_200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == icmp_fu_254_p2))) begin
        img_addr_1_reg_376 <= tmp_3_fu_285_p1;
        img_addr_reg_370 <= tmp_2_fu_279_p1;
        odd_1_reg_353 <= odd_1_fu_264_p2;
        real_addr_1_reg_364 <= tmp_3_fu_285_p1;
        real_addr_reg_358 <= tmp_2_fu_279_p1;
        rootindex_reg_382 <= rootindex_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_load_1_reg_399 <= img_q1;
        real_load_1_reg_393 <= real_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        img_twid_load_reg_445 <= img_twid_q0;
        real_twid_load_reg_439 <= real_twid_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        log_1_reg_340 <= log_1_fu_228_p2;
        log_cast2_cast_reg_332[3 : 0] <= log_cast2_cast_fu_218_p1[3 : 0];
        odd_cast_reg_325 <= odd_cast_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_198 <= real_r_q0;
        reg_206 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_1_reg_415 <= grp_fu_174_p2;
        temp_reg_405 <= grp_fu_166_p2;
        tmp_5_reg_410 <= grp_fu_170_p2;
        tmp_7_reg_420 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_2_reg_471 <= grp_fu_166_p2;
        tmp_11_reg_476 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_10_reg_466 <= grp_fu_194_p2;
        tmp_1_reg_451 <= grp_fu_182_p2;
        tmp_4_reg_456 <= grp_fu_186_p2;
        tmp_6_reg_461 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_222_p2 == 1'b0))) begin
        tmp_12_reg_345 <= tmp_12_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_9_reg_425 <= tmp_9_fu_310_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond_fu_222_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond_fu_222_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_166_opcode = ap_const_lv2_1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_166_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_166_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_166_p0 = tmp_1_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_166_p0 = reg_198;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_166_p1 = tmp_4_reg_456;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_166_p1 = real_load_1_reg_393;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_170_opcode = ap_const_lv2_1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_170_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_170_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_170_p0 = tmp_6_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_170_p0 = reg_198;
    end else begin
        grp_fu_170_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_170_p1 = tmp_10_reg_466;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_170_p1 = real_load_1_reg_393;
    end else begin
        grp_fu_170_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        img_address0 = img_addr_1_reg_376;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_address0 = tmp_2_fu_279_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        img_address1 = img_addr_1_reg_376;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        img_address1 = img_addr_reg_370;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        img_address1 = tmp_3_fu_285_p1;
    end else begin
        img_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25))) begin
        img_ce1 = 1'b1;
    end else begin
        img_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        img_d1 = tmp_11_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        img_d1 = temp_1_reg_415;
    end else begin
        img_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        img_twid_ce0 = 1'b1;
    end else begin
        img_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_we0 = 1'b1;
    end else begin
        img_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == tmp_9_reg_425)))) begin
        img_we1 = 1'b1;
    end else begin
        img_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        real_r_address0 = real_addr_1_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        real_r_address0 = tmp_2_fu_279_p1;
    end else begin
        real_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        real_r_address1 = real_addr_1_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        real_r_address1 = real_addr_reg_358;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        real_r_address1 = tmp_3_fu_285_p1;
    end else begin
        real_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        real_r_ce0 = 1'b1;
    end else begin
        real_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state25))) begin
        real_r_ce1 = 1'b1;
    end else begin
        real_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        real_r_d1 = temp_2_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        real_r_d1 = temp_reg_405;
    end else begin
        real_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        real_r_we0 = 1'b1;
    end else begin
        real_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == tmp_9_reg_425)))) begin
        real_r_we1 = 1'b1;
    end else begin
        real_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        real_twid_ce0 = 1'b1;
    end else begin
        real_twid_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond_fu_222_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((1'b0 == icmp_fu_254_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == tmp_9_fu_310_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign even_cast_fu_274_p2 = (tmp_15_fu_260_p1 & tmp_12_reg_345);

assign even_fu_269_p2 = (odd_1_fu_264_p2 ^ odd_cast_reg_325);

assign exitcond_fu_222_p2 = ((log_reg_146 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign icmp_fu_254_p2 = (($signed(tmp_14_fu_244_p4) < $signed(22'b1)) ? 1'b1 : 1'b0);

assign img_d0 = tmp_7_reg_420;

assign img_twid_address0 = tmp_s_fu_315_p1;

assign log_1_fu_228_p2 = (log_reg_146 + ap_const_lv4_1);

assign log_cast2_cast_fu_218_p1 = log_reg_146;

assign odd_1_fu_264_p2 = (odd1_reg_157 | odd_cast_reg_325);

assign odd_2_fu_320_p2 = (odd_1_reg_353 + ap_const_lv32_1);

assign odd_cast_fu_214_p1 = $signed(odd_reg_134);

assign real_r_d0 = tmp_5_reg_410;

assign real_twid_address0 = tmp_s_fu_315_p1;

assign rootindex_fu_291_p2 = even_cast_fu_274_p2 << log_cast2_cast_reg_332;

assign tmp_12_fu_238_p2 = (tmp_fu_234_p1 ^ ap_const_lv10_3FF);

assign tmp_14_fu_244_p4 = {{odd1_reg_157[ap_const_lv32_1F : ap_const_lv32_A]}};

assign tmp_15_fu_260_p1 = odd1_reg_157[9:0];

assign tmp_16_fu_306_p1 = $signed(tmp_17_fu_296_p4);

assign tmp_17_fu_296_p4 = {{odd_reg_134[ap_const_lv32_1D : ap_const_lv32_1]}};

assign tmp_2_fu_279_p1 = $signed(even_fu_269_p2);

assign tmp_3_fu_285_p1 = $signed(odd_1_fu_264_p2);

assign tmp_9_fu_310_p2 = ((rootindex_reg_382 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign tmp_fu_234_p1 = odd_reg_134[9:0];

assign tmp_s_fu_315_p1 = rootindex_reg_382;

always @ (posedge ap_clk) begin
    log_cast2_cast_reg_332[9:4] <= 6'b000000;
end

endmodule //fft
