// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fft.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fft::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fft::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> fft::ap_ST_fsm_state1 = "1";
const sc_lv<25> fft::ap_ST_fsm_state2 = "10";
const sc_lv<25> fft::ap_ST_fsm_state3 = "100";
const sc_lv<25> fft::ap_ST_fsm_state4 = "1000";
const sc_lv<25> fft::ap_ST_fsm_state5 = "10000";
const sc_lv<25> fft::ap_ST_fsm_state6 = "100000";
const sc_lv<25> fft::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> fft::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> fft::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> fft::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> fft::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> fft::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> fft::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> fft::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> fft::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> fft::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> fft::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> fft::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fft::ap_const_lv1_1 = "1";
const sc_lv<32> fft::ap_const_lv32_3 = "11";
const sc_lv<32> fft::ap_const_lv32_C = "1100";
const sc_lv<32> fft::ap_const_lv32_1 = "1";
const sc_lv<1> fft::ap_const_lv1_0 = "0";
const sc_lv<32> fft::ap_const_lv32_2 = "10";
const sc_lv<32> fft::ap_const_lv32_8 = "1000";
const sc_lv<32> fft::ap_const_lv32_A = "1010";
const sc_lv<32> fft::ap_const_lv32_B = "1011";
const sc_lv<32> fft::ap_const_lv32_12 = "10010";
const sc_lv<32> fft::ap_const_lv32_17 = "10111";
const sc_lv<32> fft::ap_const_lv32_18 = "11000";
const sc_lv<30> fft::ap_const_lv30_200 = "1000000000";
const sc_lv<4> fft::ap_const_lv4_0 = "0000";
const sc_lv<32> fft::ap_const_lv32_9 = "1001";
const sc_lv<32> fft::ap_const_lv32_4 = "100";
const sc_lv<32> fft::ap_const_lv32_13 = "10011";
const sc_lv<32> fft::ap_const_lv32_D = "1101";
const sc_lv<4> fft::ap_const_lv4_A = "1010";
const sc_lv<4> fft::ap_const_lv4_1 = "1";
const sc_lv<10> fft::ap_const_lv10_3FF = "1111111111";
const sc_lv<32> fft::ap_const_lv32_1F = "11111";
const sc_lv<22> fft::ap_const_lv22_1 = "1";
const sc_lv<32> fft::ap_const_lv32_1D = "11101";
const sc_lv<10> fft::ap_const_lv10_0 = "0000000000";
const sc_lv<2> fft::ap_const_lv2_0 = "00";
const sc_lv<2> fft::ap_const_lv2_1 = "1";

fft::fft(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fft_dadddsub_64nsbkb_U1 = new fft_dadddsub_64nsbkb<1,5,64,64,64>("fft_dadddsub_64nsbkb_U1");
    fft_dadddsub_64nsbkb_U1->clk(ap_clk);
    fft_dadddsub_64nsbkb_U1->reset(ap_rst);
    fft_dadddsub_64nsbkb_U1->din0(grp_fu_166_p0);
    fft_dadddsub_64nsbkb_U1->din1(grp_fu_166_p1);
    fft_dadddsub_64nsbkb_U1->opcode(grp_fu_166_opcode);
    fft_dadddsub_64nsbkb_U1->ce(ap_var_for_const0);
    fft_dadddsub_64nsbkb_U1->dout(grp_fu_166_p2);
    fft_dadddsub_64nsbkb_U2 = new fft_dadddsub_64nsbkb<1,5,64,64,64>("fft_dadddsub_64nsbkb_U2");
    fft_dadddsub_64nsbkb_U2->clk(ap_clk);
    fft_dadddsub_64nsbkb_U2->reset(ap_rst);
    fft_dadddsub_64nsbkb_U2->din0(grp_fu_170_p0);
    fft_dadddsub_64nsbkb_U2->din1(grp_fu_170_p1);
    fft_dadddsub_64nsbkb_U2->opcode(grp_fu_170_opcode);
    fft_dadddsub_64nsbkb_U2->ce(ap_var_for_const0);
    fft_dadddsub_64nsbkb_U2->dout(grp_fu_170_p2);
    fft_dadd_64ns_64ncud_U3 = new fft_dadd_64ns_64ncud<1,5,64,64,64>("fft_dadd_64ns_64ncud_U3");
    fft_dadd_64ns_64ncud_U3->clk(ap_clk);
    fft_dadd_64ns_64ncud_U3->reset(ap_rst);
    fft_dadd_64ns_64ncud_U3->din0(reg_206);
    fft_dadd_64ns_64ncud_U3->din1(img_load_1_reg_399);
    fft_dadd_64ns_64ncud_U3->ce(ap_var_for_const0);
    fft_dadd_64ns_64ncud_U3->dout(grp_fu_174_p2);
    fft_dsub_64ns_64ndEe_U4 = new fft_dsub_64ns_64ndEe<1,5,64,64,64>("fft_dsub_64ns_64ndEe_U4");
    fft_dsub_64ns_64ndEe_U4->clk(ap_clk);
    fft_dsub_64ns_64ndEe_U4->reset(ap_rst);
    fft_dsub_64ns_64ndEe_U4->din0(reg_206);
    fft_dsub_64ns_64ndEe_U4->din1(img_load_1_reg_399);
    fft_dsub_64ns_64ndEe_U4->ce(ap_var_for_const0);
    fft_dsub_64ns_64ndEe_U4->dout(grp_fu_178_p2);
    fft_dmul_64ns_64neOg_U5 = new fft_dmul_64ns_64neOg<1,6,64,64,64>("fft_dmul_64ns_64neOg_U5");
    fft_dmul_64ns_64neOg_U5->clk(ap_clk);
    fft_dmul_64ns_64neOg_U5->reset(ap_rst);
    fft_dmul_64ns_64neOg_U5->din0(real_twid_load_reg_439);
    fft_dmul_64ns_64neOg_U5->din1(reg_198);
    fft_dmul_64ns_64neOg_U5->ce(ap_var_for_const0);
    fft_dmul_64ns_64neOg_U5->dout(grp_fu_182_p2);
    fft_dmul_64ns_64neOg_U6 = new fft_dmul_64ns_64neOg<1,6,64,64,64>("fft_dmul_64ns_64neOg_U6");
    fft_dmul_64ns_64neOg_U6->clk(ap_clk);
    fft_dmul_64ns_64neOg_U6->reset(ap_rst);
    fft_dmul_64ns_64neOg_U6->din0(img_twid_load_reg_445);
    fft_dmul_64ns_64neOg_U6->din1(reg_206);
    fft_dmul_64ns_64neOg_U6->ce(ap_var_for_const0);
    fft_dmul_64ns_64neOg_U6->dout(grp_fu_186_p2);
    fft_dmul_64ns_64neOg_U7 = new fft_dmul_64ns_64neOg<1,6,64,64,64>("fft_dmul_64ns_64neOg_U7");
    fft_dmul_64ns_64neOg_U7->clk(ap_clk);
    fft_dmul_64ns_64neOg_U7->reset(ap_rst);
    fft_dmul_64ns_64neOg_U7->din0(real_twid_load_reg_439);
    fft_dmul_64ns_64neOg_U7->din1(reg_206);
    fft_dmul_64ns_64neOg_U7->ce(ap_var_for_const0);
    fft_dmul_64ns_64neOg_U7->dout(grp_fu_190_p2);
    fft_dmul_64ns_64neOg_U8 = new fft_dmul_64ns_64neOg<1,6,64,64,64>("fft_dmul_64ns_64neOg_U8");
    fft_dmul_64ns_64neOg_U8->clk(ap_clk);
    fft_dmul_64ns_64neOg_U8->reset(ap_rst);
    fft_dmul_64ns_64neOg_U8->din0(img_twid_load_reg_445);
    fft_dmul_64ns_64neOg_U8->din1(reg_198);
    fft_dmul_64ns_64neOg_U8->ce(ap_var_for_const0);
    fft_dmul_64ns_64neOg_U8->dout(grp_fu_194_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_222_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_222_p2 );

    SC_METHOD(thread_even_cast_fu_274_p2);
    sensitive << ( tmp_12_reg_345 );
    sensitive << ( tmp_15_fu_260_p1 );

    SC_METHOD(thread_even_fu_269_p2);
    sensitive << ( odd_cast_reg_325 );
    sensitive << ( odd_1_fu_264_p2 );

    SC_METHOD(thread_exitcond_fu_222_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( log_reg_146 );

    SC_METHOD(thread_grp_fu_166_opcode);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_166_p0);
    sensitive << ( reg_198 );
    sensitive << ( tmp_1_reg_451 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_166_p1);
    sensitive << ( real_load_1_reg_393 );
    sensitive << ( tmp_4_reg_456 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_170_opcode);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_170_p0);
    sensitive << ( reg_198 );
    sensitive << ( tmp_6_reg_461 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_170_p1);
    sensitive << ( real_load_1_reg_393 );
    sensitive << ( tmp_10_reg_466 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_icmp_fu_254_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_14_fu_244_p4 );

    SC_METHOD(thread_img_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( img_addr_1_reg_376 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_2_fu_279_p1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( img_addr_reg_370 );
    sensitive << ( img_addr_1_reg_376 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_3_fu_285_p1 );

    SC_METHOD(thread_img_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_img_d0);
    sensitive << ( tmp_7_reg_420 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_d1);
    sensitive << ( temp_1_reg_415 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_11_reg_476 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_img_twid_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_s_fu_315_p1 );

    SC_METHOD(thread_img_twid_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_img_we0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_we1);
    sensitive << ( tmp_9_reg_425 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_log_1_fu_228_p2);
    sensitive << ( log_reg_146 );

    SC_METHOD(thread_log_cast2_cast_fu_218_p1);
    sensitive << ( log_reg_146 );

    SC_METHOD(thread_odd_1_fu_264_p2);
    sensitive << ( odd_cast_reg_325 );
    sensitive << ( odd1_reg_157 );

    SC_METHOD(thread_odd_2_fu_320_p2);
    sensitive << ( odd_1_reg_353 );

    SC_METHOD(thread_odd_cast_fu_214_p1);
    sensitive << ( odd_reg_134 );

    SC_METHOD(thread_real_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( real_addr_1_reg_364 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_2_fu_279_p1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_real_r_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( real_addr_reg_358 );
    sensitive << ( real_addr_1_reg_364 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_3_fu_285_p1 );

    SC_METHOD(thread_real_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_real_r_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_real_r_d0);
    sensitive << ( tmp_5_reg_410 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_real_r_d1);
    sensitive << ( temp_reg_405 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( temp_2_reg_471 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_real_r_we0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_real_r_we1);
    sensitive << ( tmp_9_reg_425 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_real_twid_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_s_fu_315_p1 );

    SC_METHOD(thread_real_twid_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_rootindex_fu_291_p2);
    sensitive << ( log_cast2_cast_reg_332 );
    sensitive << ( even_cast_fu_274_p2 );

    SC_METHOD(thread_tmp_12_fu_238_p2);
    sensitive << ( tmp_fu_234_p1 );

    SC_METHOD(thread_tmp_14_fu_244_p4);
    sensitive << ( odd1_reg_157 );

    SC_METHOD(thread_tmp_15_fu_260_p1);
    sensitive << ( odd1_reg_157 );

    SC_METHOD(thread_tmp_16_fu_306_p1);
    sensitive << ( tmp_17_fu_296_p4 );

    SC_METHOD(thread_tmp_17_fu_296_p4);
    sensitive << ( odd_reg_134 );

    SC_METHOD(thread_tmp_2_fu_279_p1);
    sensitive << ( even_fu_269_p2 );

    SC_METHOD(thread_tmp_3_fu_285_p1);
    sensitive << ( odd_1_fu_264_p2 );

    SC_METHOD(thread_tmp_9_fu_310_p2);
    sensitive << ( rootindex_reg_382 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_fu_234_p1);
    sensitive << ( odd_reg_134 );

    SC_METHOD(thread_tmp_s_fu_315_p1);
    sensitive << ( rootindex_reg_382 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_222_p2 );
    sensitive << ( icmp_fu_254_p2 );
    sensitive << ( tmp_9_fu_310_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fft_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, real_r_address0, "(port)real_r_address0");
    sc_trace(mVcdFile, real_r_ce0, "(port)real_r_ce0");
    sc_trace(mVcdFile, real_r_we0, "(port)real_r_we0");
    sc_trace(mVcdFile, real_r_d0, "(port)real_r_d0");
    sc_trace(mVcdFile, real_r_q0, "(port)real_r_q0");
    sc_trace(mVcdFile, real_r_address1, "(port)real_r_address1");
    sc_trace(mVcdFile, real_r_ce1, "(port)real_r_ce1");
    sc_trace(mVcdFile, real_r_we1, "(port)real_r_we1");
    sc_trace(mVcdFile, real_r_d1, "(port)real_r_d1");
    sc_trace(mVcdFile, real_r_q1, "(port)real_r_q1");
    sc_trace(mVcdFile, img_address0, "(port)img_address0");
    sc_trace(mVcdFile, img_ce0, "(port)img_ce0");
    sc_trace(mVcdFile, img_we0, "(port)img_we0");
    sc_trace(mVcdFile, img_d0, "(port)img_d0");
    sc_trace(mVcdFile, img_q0, "(port)img_q0");
    sc_trace(mVcdFile, img_address1, "(port)img_address1");
    sc_trace(mVcdFile, img_ce1, "(port)img_ce1");
    sc_trace(mVcdFile, img_we1, "(port)img_we1");
    sc_trace(mVcdFile, img_d1, "(port)img_d1");
    sc_trace(mVcdFile, img_q1, "(port)img_q1");
    sc_trace(mVcdFile, real_twid_address0, "(port)real_twid_address0");
    sc_trace(mVcdFile, real_twid_ce0, "(port)real_twid_ce0");
    sc_trace(mVcdFile, real_twid_q0, "(port)real_twid_q0");
    sc_trace(mVcdFile, img_twid_address0, "(port)img_twid_address0");
    sc_trace(mVcdFile, img_twid_ce0, "(port)img_twid_ce0");
    sc_trace(mVcdFile, img_twid_q0, "(port)img_twid_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_198, "reg_198");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, reg_206, "reg_206");
    sc_trace(mVcdFile, odd_cast_fu_214_p1, "odd_cast_fu_214_p1");
    sc_trace(mVcdFile, odd_cast_reg_325, "odd_cast_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, log_cast2_cast_fu_218_p1, "log_cast2_cast_fu_218_p1");
    sc_trace(mVcdFile, log_cast2_cast_reg_332, "log_cast2_cast_reg_332");
    sc_trace(mVcdFile, log_1_fu_228_p2, "log_1_fu_228_p2");
    sc_trace(mVcdFile, log_1_reg_340, "log_1_reg_340");
    sc_trace(mVcdFile, tmp_12_fu_238_p2, "tmp_12_fu_238_p2");
    sc_trace(mVcdFile, tmp_12_reg_345, "tmp_12_reg_345");
    sc_trace(mVcdFile, exitcond_fu_222_p2, "exitcond_fu_222_p2");
    sc_trace(mVcdFile, odd_1_fu_264_p2, "odd_1_fu_264_p2");
    sc_trace(mVcdFile, odd_1_reg_353, "odd_1_reg_353");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_fu_254_p2, "icmp_fu_254_p2");
    sc_trace(mVcdFile, real_addr_reg_358, "real_addr_reg_358");
    sc_trace(mVcdFile, real_addr_1_reg_364, "real_addr_1_reg_364");
    sc_trace(mVcdFile, img_addr_reg_370, "img_addr_reg_370");
    sc_trace(mVcdFile, img_addr_1_reg_376, "img_addr_1_reg_376");
    sc_trace(mVcdFile, rootindex_fu_291_p2, "rootindex_fu_291_p2");
    sc_trace(mVcdFile, rootindex_reg_382, "rootindex_reg_382");
    sc_trace(mVcdFile, tmp_16_fu_306_p1, "tmp_16_fu_306_p1");
    sc_trace(mVcdFile, real_load_1_reg_393, "real_load_1_reg_393");
    sc_trace(mVcdFile, img_load_1_reg_399, "img_load_1_reg_399");
    sc_trace(mVcdFile, grp_fu_166_p2, "grp_fu_166_p2");
    sc_trace(mVcdFile, temp_reg_405, "temp_reg_405");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_170_p2, "grp_fu_170_p2");
    sc_trace(mVcdFile, tmp_5_reg_410, "tmp_5_reg_410");
    sc_trace(mVcdFile, grp_fu_174_p2, "grp_fu_174_p2");
    sc_trace(mVcdFile, temp_1_reg_415, "temp_1_reg_415");
    sc_trace(mVcdFile, grp_fu_178_p2, "grp_fu_178_p2");
    sc_trace(mVcdFile, tmp_7_reg_420, "tmp_7_reg_420");
    sc_trace(mVcdFile, tmp_9_fu_310_p2, "tmp_9_fu_310_p2");
    sc_trace(mVcdFile, tmp_9_reg_425, "tmp_9_reg_425");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, real_twid_load_reg_439, "real_twid_load_reg_439");
    sc_trace(mVcdFile, img_twid_load_reg_445, "img_twid_load_reg_445");
    sc_trace(mVcdFile, grp_fu_182_p2, "grp_fu_182_p2");
    sc_trace(mVcdFile, tmp_1_reg_451, "tmp_1_reg_451");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_fu_186_p2, "grp_fu_186_p2");
    sc_trace(mVcdFile, tmp_4_reg_456, "tmp_4_reg_456");
    sc_trace(mVcdFile, grp_fu_190_p2, "grp_fu_190_p2");
    sc_trace(mVcdFile, tmp_6_reg_461, "tmp_6_reg_461");
    sc_trace(mVcdFile, grp_fu_194_p2, "grp_fu_194_p2");
    sc_trace(mVcdFile, tmp_10_reg_466, "tmp_10_reg_466");
    sc_trace(mVcdFile, temp_2_reg_471, "temp_2_reg_471");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, tmp_11_reg_476, "tmp_11_reg_476");
    sc_trace(mVcdFile, odd_2_fu_320_p2, "odd_2_fu_320_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, odd_reg_134, "odd_reg_134");
    sc_trace(mVcdFile, log_reg_146, "log_reg_146");
    sc_trace(mVcdFile, odd1_reg_157, "odd1_reg_157");
    sc_trace(mVcdFile, tmp_2_fu_279_p1, "tmp_2_fu_279_p1");
    sc_trace(mVcdFile, tmp_3_fu_285_p1, "tmp_3_fu_285_p1");
    sc_trace(mVcdFile, tmp_s_fu_315_p1, "tmp_s_fu_315_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_fu_166_p0, "grp_fu_166_p0");
    sc_trace(mVcdFile, grp_fu_166_p1, "grp_fu_166_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_170_p0, "grp_fu_170_p0");
    sc_trace(mVcdFile, grp_fu_170_p1, "grp_fu_170_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_fu_234_p1, "tmp_fu_234_p1");
    sc_trace(mVcdFile, tmp_14_fu_244_p4, "tmp_14_fu_244_p4");
    sc_trace(mVcdFile, tmp_15_fu_260_p1, "tmp_15_fu_260_p1");
    sc_trace(mVcdFile, even_fu_269_p2, "even_fu_269_p2");
    sc_trace(mVcdFile, even_cast_fu_274_p2, "even_cast_fu_274_p2");
    sc_trace(mVcdFile, tmp_17_fu_296_p4, "tmp_17_fu_296_p4");
    sc_trace(mVcdFile, grp_fu_166_opcode, "grp_fu_166_opcode");
    sc_trace(mVcdFile, grp_fu_170_opcode, "grp_fu_170_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fft.hdltvin.dat");
    mHdltvoutHandle.open("fft.hdltvout.dat");
}

fft::~fft() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fft_dadddsub_64nsbkb_U1;
    delete fft_dadddsub_64nsbkb_U2;
    delete fft_dadd_64ns_64ncud_U3;
    delete fft_dsub_64ns_64ndEe_U4;
    delete fft_dmul_64ns_64neOg_U5;
    delete fft_dmul_64ns_64neOg_U6;
    delete fft_dmul_64ns_64neOg_U7;
    delete fft_dmul_64ns_64neOg_U8;
}

void fft::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fft::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_254_p2.read()))) {
        log_reg_146 = log_1_reg_340.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        log_reg_146 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()))) {
        odd1_reg_157 = odd_2_fu_320_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_222_p2.read(), ap_const_lv1_0))) {
        odd1_reg_157 = odd_cast_fu_214_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_254_p2.read()))) {
        odd_reg_134 = tmp_16_fu_306_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        odd_reg_134 = ap_const_lv30_200;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_254_p2.read()))) {
        img_addr_1_reg_376 =  (sc_lv<10>) (tmp_3_fu_285_p1.read());
        img_addr_reg_370 =  (sc_lv<10>) (tmp_2_fu_279_p1.read());
        odd_1_reg_353 = odd_1_fu_264_p2.read();
        real_addr_1_reg_364 =  (sc_lv<10>) (tmp_3_fu_285_p1.read());
        real_addr_reg_358 =  (sc_lv<10>) (tmp_2_fu_279_p1.read());
        rootindex_reg_382 = rootindex_fu_291_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        img_load_1_reg_399 = img_q1.read();
        real_load_1_reg_393 = real_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        img_twid_load_reg_445 = img_twid_q0.read();
        real_twid_load_reg_439 = real_twid_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        log_1_reg_340 = log_1_fu_228_p2.read();
        log_cast2_cast_reg_332 = log_cast2_cast_fu_218_p1.read();
        odd_cast_reg_325 = odd_cast_fu_214_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())))) {
        reg_198 = real_r_q0.read();
        reg_206 = img_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        temp_1_reg_415 = grp_fu_174_p2.read();
        temp_reg_405 = grp_fu_166_p2.read();
        tmp_5_reg_410 = grp_fu_170_p2.read();
        tmp_7_reg_420 = grp_fu_178_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read()))) {
        temp_2_reg_471 = grp_fu_166_p2.read();
        tmp_11_reg_476 = grp_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        tmp_10_reg_466 = grp_fu_194_p2.read();
        tmp_1_reg_451 = grp_fu_182_p2.read();
        tmp_4_reg_456 = grp_fu_186_p2.read();
        tmp_6_reg_461 = grp_fu_190_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_222_p2.read(), ap_const_lv1_0))) {
        tmp_12_reg_345 = tmp_12_fu_238_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        tmp_9_reg_425 = tmp_9_fu_310_p2.read();
    }
}

void fft::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void fft::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void fft::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void fft::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void fft::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void fft::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void fft::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void fft::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void fft::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void fft::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read().range(23, 23);
}

void fft::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read().range(24, 24);
}

void fft::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void fft::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void fft::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void fft::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void fft::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_222_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fft::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fft::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_222_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fft::thread_even_cast_fu_274_p2() {
    even_cast_fu_274_p2 = (tmp_15_fu_260_p1.read() & tmp_12_reg_345.read());
}

void fft::thread_even_fu_269_p2() {
    even_fu_269_p2 = (odd_1_fu_264_p2.read() ^ odd_cast_reg_325.read());
}

void fft::thread_exitcond_fu_222_p2() {
    exitcond_fu_222_p2 = (!log_reg_146.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(log_reg_146.read() == ap_const_lv4_A);
}

void fft::thread_grp_fu_166_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_166_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_166_opcode = ap_const_lv2_0;
    } else {
        grp_fu_166_opcode = "XX";
    }
}

void fft::thread_grp_fu_166_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_166_p0 = tmp_1_reg_451.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_166_p0 = reg_198.read();
    } else {
        grp_fu_166_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_166_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_166_p1 = tmp_4_reg_456.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_166_p1 = real_load_1_reg_393.read();
    } else {
        grp_fu_166_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_170_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_170_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_170_opcode = ap_const_lv2_0;
    } else {
        grp_fu_170_opcode = "XX";
    }
}

void fft::thread_grp_fu_170_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_170_p0 = tmp_6_reg_461.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_170_p0 = reg_198.read();
    } else {
        grp_fu_170_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_grp_fu_170_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        grp_fu_170_p1 = tmp_10_reg_466.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        grp_fu_170_p1 = real_load_1_reg_393.read();
    } else {
        grp_fu_170_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_icmp_fu_254_p2() {
    icmp_fu_254_p2 = (!tmp_14_fu_244_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_14_fu_244_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void fft::thread_img_address0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        img_address0 = img_addr_1_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        img_address0 =  (sc_lv<10>) (tmp_2_fu_279_p1.read());
    } else {
        img_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_img_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()))) {
        img_address1 = img_addr_1_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        img_address1 = img_addr_reg_370.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        img_address1 =  (sc_lv<10>) (tmp_3_fu_285_p1.read());
    } else {
        img_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_img_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        img_ce0 = ap_const_logic_1;
    } else {
        img_ce0 = ap_const_logic_0;
    }
}

void fft::thread_img_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        img_ce1 = ap_const_logic_1;
    } else {
        img_ce1 = ap_const_logic_0;
    }
}

void fft::thread_img_d0() {
    img_d0 = tmp_7_reg_420.read();
}

void fft::thread_img_d1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()))) {
        img_d1 = tmp_11_reg_476.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        img_d1 = temp_1_reg_415.read();
    } else {
        img_d1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_img_twid_address0() {
    img_twid_address0 =  (sc_lv<9>) (tmp_s_fu_315_p1.read());
}

void fft::thread_img_twid_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        img_twid_ce0 = ap_const_logic_1;
    } else {
        img_twid_ce0 = ap_const_logic_0;
    }
}

void fft::thread_img_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        img_we0 = ap_const_logic_1;
    } else {
        img_we0 = ap_const_logic_0;
    }
}

void fft::thread_img_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_425.read())))) {
        img_we1 = ap_const_logic_1;
    } else {
        img_we1 = ap_const_logic_0;
    }
}

void fft::thread_log_1_fu_228_p2() {
    log_1_fu_228_p2 = (!log_reg_146.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(log_reg_146.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fft::thread_log_cast2_cast_fu_218_p1() {
    log_cast2_cast_fu_218_p1 = esl_zext<10,4>(log_reg_146.read());
}

void fft::thread_odd_1_fu_264_p2() {
    odd_1_fu_264_p2 = (odd1_reg_157.read() | odd_cast_reg_325.read());
}

void fft::thread_odd_2_fu_320_p2() {
    odd_2_fu_320_p2 = (!odd_1_reg_353.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(odd_1_reg_353.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fft::thread_odd_cast_fu_214_p1() {
    odd_cast_fu_214_p1 = esl_sext<32,30>(odd_reg_134.read());
}

void fft::thread_real_r_address0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        real_r_address0 = real_addr_1_reg_364.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        real_r_address0 =  (sc_lv<10>) (tmp_2_fu_279_p1.read());
    } else {
        real_r_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_real_r_address1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()))) {
        real_r_address1 = real_addr_1_reg_364.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        real_r_address1 = real_addr_reg_358.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        real_r_address1 =  (sc_lv<10>) (tmp_3_fu_285_p1.read());
    } else {
        real_r_address1 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void fft::thread_real_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        real_r_ce0 = ap_const_logic_1;
    } else {
        real_r_ce0 = ap_const_logic_0;
    }
}

void fft::thread_real_r_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        real_r_ce1 = ap_const_logic_1;
    } else {
        real_r_ce1 = ap_const_logic_0;
    }
}

void fft::thread_real_r_d0() {
    real_r_d0 = tmp_5_reg_410.read();
}

void fft::thread_real_r_d1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()))) {
        real_r_d1 = temp_2_reg_471.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        real_r_d1 = temp_reg_405.read();
    } else {
        real_r_d1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fft::thread_real_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        real_r_we0 = ap_const_logic_1;
    } else {
        real_r_we0 = ap_const_logic_0;
    }
}

void fft::thread_real_r_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_reg_425.read())))) {
        real_r_we1 = ap_const_logic_1;
    } else {
        real_r_we1 = ap_const_logic_0;
    }
}

void fft::thread_real_twid_address0() {
    real_twid_address0 =  (sc_lv<9>) (tmp_s_fu_315_p1.read());
}

void fft::thread_real_twid_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        real_twid_ce0 = ap_const_logic_1;
    } else {
        real_twid_ce0 = ap_const_logic_0;
    }
}

void fft::thread_rootindex_fu_291_p2() {
    rootindex_fu_291_p2 = (!log_cast2_cast_reg_332.read().is_01())? sc_lv<10>(): even_cast_fu_274_p2.read() << (unsigned short)log_cast2_cast_reg_332.read().to_uint();
}

void fft::thread_tmp_12_fu_238_p2() {
    tmp_12_fu_238_p2 = (tmp_fu_234_p1.read() ^ ap_const_lv10_3FF);
}

void fft::thread_tmp_14_fu_244_p4() {
    tmp_14_fu_244_p4 = odd1_reg_157.read().range(31, 10);
}

void fft::thread_tmp_15_fu_260_p1() {
    tmp_15_fu_260_p1 = odd1_reg_157.read().range(10-1, 0);
}

void fft::thread_tmp_16_fu_306_p1() {
    tmp_16_fu_306_p1 = esl_sext<30,29>(tmp_17_fu_296_p4.read());
}

void fft::thread_tmp_17_fu_296_p4() {
    tmp_17_fu_296_p4 = odd_reg_134.read().range(29, 1);
}

void fft::thread_tmp_2_fu_279_p1() {
    tmp_2_fu_279_p1 = esl_sext<64,32>(even_fu_269_p2.read());
}

void fft::thread_tmp_3_fu_285_p1() {
    tmp_3_fu_285_p1 = esl_sext<64,32>(odd_1_fu_264_p2.read());
}

void fft::thread_tmp_9_fu_310_p2() {
    tmp_9_fu_310_p2 = (!rootindex_reg_382.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(rootindex_reg_382.read() == ap_const_lv10_0);
}

void fft::thread_tmp_fu_234_p1() {
    tmp_fu_234_p1 = odd_reg_134.read().range(10-1, 0);
}

void fft::thread_tmp_s_fu_315_p1() {
    tmp_s_fu_315_p1 = esl_zext<64,10>(rootindex_reg_382.read());
}

void fft::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_222_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_254_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_310_p2.read())) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fft::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_address0\" :  \"" << real_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_ce0\" :  \"" << real_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_we0\" :  \"" << real_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_d0\" :  \"" << real_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_r_q0\" :  \"" << real_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_address1\" :  \"" << real_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_ce1\" :  \"" << real_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_we1\" :  \"" << real_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_r_d1\" :  \"" << real_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_r_q1\" :  \"" << real_r_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_address0\" :  \"" << img_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_ce0\" :  \"" << img_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_we0\" :  \"" << img_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_d0\" :  \"" << img_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"img_q0\" :  \"" << img_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_address1\" :  \"" << img_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_ce1\" :  \"" << img_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_we1\" :  \"" << img_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_d1\" :  \"" << img_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"img_q1\" :  \"" << img_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_twid_address0\" :  \"" << real_twid_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_twid_ce0\" :  \"" << real_twid_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_twid_q0\" :  \"" << real_twid_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_twid_address0\" :  \"" << img_twid_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"img_twid_ce0\" :  \"" << img_twid_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"img_twid_q0\" :  \"" << img_twid_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

