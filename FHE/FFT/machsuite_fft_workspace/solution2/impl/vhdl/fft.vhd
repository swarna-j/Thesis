-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    real_r_ce0 : OUT STD_LOGIC;
    real_r_we0 : OUT STD_LOGIC;
    real_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    real_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_we0 : OUT STD_LOGIC;
    img_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    img_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    real_twid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    real_twid_ce0 : OUT STD_LOGIC;
    real_twid_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    img_twid_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    img_twid_ce0 : OUT STD_LOGIC;
    img_twid_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=138261,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=56,HLS_SYN_FF=4297,HLS_SYN_LUT=7581}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv30_200 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal odd_cast_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal odd_cast_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal log_cast2_cast_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal log_cast2_cast_reg_333 : STD_LOGIC_VECTOR (9 downto 0);
    signal log_1_fu_230_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal log_1_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_240_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_346 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal odd_1_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal odd_1_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal real_addr_reg_360 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_365 : STD_LOGIC_VECTOR (9 downto 0);
    signal rootindex_fu_287_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rootindex_reg_370 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_302_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal real_addr_1_reg_381 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_1_reg_386 : STD_LOGIC_VECTOR (9 downto 0);
    signal real_load_1_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_load_1_reg_397 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_1_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal real_twid_load_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_twid_load_reg_443 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_2_reg_469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_11_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal odd_2_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal odd_reg_136 : STD_LOGIC_VECTOR (29 downto 0);
    signal log_reg_148 : STD_LOGIC_VECTOR (3 downto 0);
    signal odd1_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_fu_236_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_246_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_15_fu_262_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal even_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal even_cast_fu_276_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_292_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_168_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_172_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component fft_dadddsub_64nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_dadd_64ns_64ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_dsub_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_dmul_64ns_64neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fft_dadddsub_64nsbkb_U1 : component fft_dadddsub_64nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        opcode => grp_fu_168_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    fft_dadddsub_64nsbkb_U2 : component fft_dadddsub_64nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        opcode => grp_fu_172_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    fft_dadd_64ns_64ncud_U3 : component fft_dadd_64ns_64ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_208,
        din1 => img_load_1_reg_397,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    fft_dsub_64ns_64ndEe_U4 : component fft_dsub_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_208,
        din1 => img_load_1_reg_397,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    fft_dmul_64ns_64neOg_U5 : component fft_dmul_64ns_64neOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => real_twid_load_reg_437,
        din1 => reg_200,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    fft_dmul_64ns_64neOg_U6 : component fft_dmul_64ns_64neOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_twid_load_reg_443,
        din1 => reg_208,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    fft_dmul_64ns_64neOg_U7 : component fft_dmul_64ns_64neOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => real_twid_load_reg_437,
        din1 => reg_208,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p2);

    fft_dmul_64ns_64neOg_U8 : component fft_dmul_64ns_64neOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => img_twid_load_reg_443,
        din1 => reg_200,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    log_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = icmp_fu_256_p2))) then 
                log_reg_148 <= log_1_reg_341;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                log_reg_148 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    odd1_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
                odd1_reg_159 <= odd_2_fu_321_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_fu_224_p2 = ap_const_lv1_0))) then 
                odd1_reg_159 <= odd_cast_fu_216_p1;
            end if; 
        end if;
    end process;

    odd_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = icmp_fu_256_p2))) then 
                odd_reg_136 <= tmp_16_fu_302_p1;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                odd_reg_136 <= ap_const_lv30_200;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                img_addr_1_reg_386 <= tmp_3_fu_306_p1(10 - 1 downto 0);
                real_addr_1_reg_381 <= tmp_3_fu_306_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = icmp_fu_256_p2)))) then
                img_addr_reg_365 <= tmp_2_fu_281_p1(10 - 1 downto 0);
                odd_1_reg_354 <= odd_1_fu_266_p2;
                real_addr_reg_360 <= tmp_2_fu_281_p1(10 - 1 downto 0);
                rootindex_reg_370 <= rootindex_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                img_load_1_reg_397 <= img_q0;
                real_load_1_reg_391 <= real_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                img_twid_load_reg_443 <= img_twid_q0;
                real_twid_load_reg_437 <= real_twid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                log_1_reg_341 <= log_1_fu_230_p2;
                    log_cast2_cast_reg_333(3 downto 0) <= log_cast2_cast_fu_220_p1(3 downto 0);
                odd_cast_reg_326 <= odd_cast_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)))) then
                reg_200 <= real_r_q0;
                reg_208 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                temp_1_reg_413 <= grp_fu_176_p2;
                temp_reg_403 <= grp_fu_168_p2;
                tmp_5_reg_408 <= grp_fu_172_p2;
                tmp_7_reg_418 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                temp_2_reg_469 <= grp_fu_168_p2;
                tmp_11_reg_474 <= grp_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                tmp_10_reg_464 <= grp_fu_196_p2;
                tmp_1_reg_449 <= grp_fu_184_p2;
                tmp_4_reg_454 <= grp_fu_188_p2;
                tmp_6_reg_459 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond_fu_224_p2 = ap_const_lv1_0))) then
                tmp_12_reg_346 <= tmp_12_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_9_reg_423 <= tmp_9_fu_311_p2;
            end if;
        end if;
    end process;
    log_cast2_cast_reg_333(9 downto 4) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_224_p2, icmp_fu_256_p2, tmp_9_fu_311_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond_fu_224_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_lv1_0 = icmp_fu_256_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_lv1_0 = tmp_9_fu_311_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_224_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_fu_224_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_224_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond_fu_224_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    even_cast_fu_276_p2 <= (tmp_15_fu_262_p1 and tmp_12_reg_346);
    even_fu_271_p2 <= (odd_1_fu_266_p2 xor odd_cast_reg_326);
    exitcond_fu_224_p2 <= "1" when (log_reg_148 = ap_const_lv4_A) else "0";

    grp_fu_168_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_168_opcode <= ap_const_lv2_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_168_opcode <= ap_const_lv2_0;
        else 
            grp_fu_168_opcode <= "XX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(reg_200, tmp_1_reg_449, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_168_p0 <= tmp_1_reg_449;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_168_p0 <= reg_200;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p1_assign_proc : process(real_load_1_reg_391, tmp_4_reg_454, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_168_p1 <= tmp_4_reg_454;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_168_p1 <= real_load_1_reg_391;
        else 
            grp_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_172_opcode <= ap_const_lv2_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_172_opcode <= ap_const_lv2_0;
        else 
            grp_fu_172_opcode <= "XX";
        end if; 
    end process;


    grp_fu_172_p0_assign_proc : process(reg_200, tmp_6_reg_459, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_172_p0 <= tmp_6_reg_459;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_172_p0 <= reg_200;
        else 
            grp_fu_172_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_172_p1_assign_proc : process(real_load_1_reg_391, tmp_10_reg_464, ap_CS_fsm_state6, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            grp_fu_172_p1 <= tmp_10_reg_464;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            grp_fu_172_p1 <= real_load_1_reg_391;
        else 
            grp_fu_172_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_fu_256_p2 <= "1" when (signed(tmp_14_fu_246_p4) < signed(ap_const_lv22_1)) else "0";

    img_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, img_addr_reg_365, img_addr_1_reg_386, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state26, tmp_2_fu_281_p1, tmp_3_fu_306_p1, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            img_address0 <= img_addr_reg_365;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            img_address0 <= img_addr_1_reg_386;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            img_address0 <= tmp_3_fu_306_p1(10 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            img_address0 <= tmp_2_fu_281_p1(10 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_d0_assign_proc : process(temp_1_reg_413, tmp_7_reg_418, ap_CS_fsm_state12, tmp_11_reg_474, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            img_d0 <= tmp_11_reg_474;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            img_d0 <= temp_1_reg_413;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            img_d0 <= tmp_7_reg_418;
        else 
            img_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    img_twid_address0 <= tmp_s_fu_316_p1(9 - 1 downto 0);

    img_twid_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            img_twid_ce0 <= ap_const_logic_1;
        else 
            img_twid_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_we0_assign_proc : process(tmp_9_reg_423, ap_CS_fsm_state12, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_9_reg_423)))) then 
            img_we0 <= ap_const_logic_1;
        else 
            img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    log_1_fu_230_p2 <= std_logic_vector(unsigned(log_reg_148) + unsigned(ap_const_lv4_1));
    log_cast2_cast_fu_220_p1 <= std_logic_vector(resize(unsigned(log_reg_148),10));
    odd_1_fu_266_p2 <= (odd1_reg_159 or odd_cast_reg_326);
    odd_2_fu_321_p2 <= std_logic_vector(unsigned(odd_1_reg_354) + unsigned(ap_const_lv32_1));
        odd_cast_fu_216_p1 <= std_logic_vector(resize(signed(odd_reg_136),32));


    real_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, real_addr_reg_360, real_addr_1_reg_381, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state26, tmp_2_fu_281_p1, tmp_3_fu_306_p1, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            real_r_address0 <= real_addr_reg_360;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            real_r_address0 <= real_addr_1_reg_381;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            real_r_address0 <= tmp_3_fu_306_p1(10 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            real_r_address0 <= tmp_2_fu_281_p1(10 - 1 downto 0);
        else 
            real_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    real_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            real_r_ce0 <= ap_const_logic_1;
        else 
            real_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_r_d0_assign_proc : process(temp_reg_403, tmp_5_reg_408, ap_CS_fsm_state12, temp_2_reg_469, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            real_r_d0 <= temp_2_reg_469;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            real_r_d0 <= temp_reg_403;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            real_r_d0 <= tmp_5_reg_408;
        else 
            real_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    real_r_we0_assign_proc : process(tmp_9_reg_423, ap_CS_fsm_state12, ap_CS_fsm_state26, ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = tmp_9_reg_423)))) then 
            real_r_we0 <= ap_const_logic_1;
        else 
            real_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    real_twid_address0 <= tmp_s_fu_316_p1(9 - 1 downto 0);

    real_twid_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            real_twid_ce0 <= ap_const_logic_1;
        else 
            real_twid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rootindex_fu_287_p2 <= std_logic_vector(shift_left(unsigned(even_cast_fu_276_p2),to_integer(unsigned('0' & log_cast2_cast_reg_333(10-1 downto 0)))));
    tmp_12_fu_240_p2 <= (tmp_fu_236_p1 xor ap_const_lv10_3FF);
    tmp_14_fu_246_p4 <= odd1_reg_159(31 downto 10);
    tmp_15_fu_262_p1 <= odd1_reg_159(10 - 1 downto 0);
        tmp_16_fu_302_p1 <= std_logic_vector(resize(signed(tmp_17_fu_292_p4),30));

    tmp_17_fu_292_p4 <= odd_reg_136(29 downto 1);
        tmp_2_fu_281_p1 <= std_logic_vector(resize(signed(even_fu_271_p2),64));

        tmp_3_fu_306_p1 <= std_logic_vector(resize(signed(odd_1_reg_354),64));

    tmp_9_fu_311_p2 <= "1" when (rootindex_reg_370 = ap_const_lv10_0) else "0";
    tmp_fu_236_p1 <= odd_reg_136(10 - 1 downto 0);
    tmp_s_fu_316_p1 <= std_logic_vector(resize(unsigned(rootindex_reg_370),64));
end behav;
